- name: Disable Swap
  hosts: kube
  become: yes
  tasks:
    - name: Turning Swap off
      command: swapoff -a
    - name: Comment out swap entry to prevent it from being used after restart
      lineinfile:
        path: /etc/fstab
        regexp: '^.* swap .*'
        state: absent

- name: Forward IPv4 and Enable iptables for Bridged Traffic
  hosts: kube
  become: yes
  tasks:
    - name: Adding kernel modules in k8s.conf
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Load overlay module
      command: modprobe overlay

    - name: Load br_netfilter module
      command: modprobe br_netfilter

    - name: Adding sysctl params in k8s.conf
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1

    - name: Apply sysctl parameters
      command: sysctl --system

- name: Install and Configure containerd
  hosts: kube
  become: yes 
  tasks:
    - name: Ensure systemd directory for containerd exists
      file:
        path: /usr/local/lib/systemd/system
        state: directory
    - name: Download containerd tarball
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz
        dest: /tmp/containerd-1.7.14-linux-amd64.tar.gz

    - name: Extract containerd
      unarchive:
        src: /tmp/containerd-1.7.14-linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: Download containerd systemd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate default containerd configuration
      command: containerd config default
      register: containerd_config
      changed_when: false 

    - name: Create containerd config.toml
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"

    - name: Enable systemd cgroups
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^SystemdCgroup = false'
        line: 'SystemdCgroup = true'

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start containerd
      service:
        name: containerd
        enabled: yes
        state: started

    - name: Verify containerd service
      command: systemctl status containerd
      register: containerd_status
      changed_when: false

    - debug:
        var: containerd_status.stdout

- name: Download and Install runc
  hosts: kube
  become: yes
  tasks:
    - name: Ensure /usr/local/sbin directory exists
      file:
        path: /usr/local/sbin
        state: directory
    - name: Download runc binary
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
        dest: /tmp/runc.amd64

    - name: Install runc binary
      command: install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc

    - name: Ensure runc is executable
      file:
        path: /usr/local/sbin/runc
        mode: '0755'


- name: Download and Install CNI Plugins
  hosts: kube
  become: yes 
  tasks:
    - name: Download CNI plugins tarball
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz

    - name: Create CNI directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Extract CNI plugins
      unarchive:
        src: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /opt/cni/bin
        remote_src: yes 

- name: Install Kubernetes Components
  hosts: kube
  become: yes
  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /tmp/kubernetes.gpg

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Check if key exists
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: file_stat

    - name: Install Kubernetes GPG key
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes.gpg
      when: not file_stat.stat.exists

    - name: Set permissions on Kubernetes GPG key
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Add Kubernetes APT repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        mode: '0644'

    - name: Update apt package index again
      apt:
        update_cache: yes

    - name: Install kubeadm, kubelet, and kubectl
      apt:
        name:
          - kubelet=1.29.6-1.1
          - kubeadm=1.29.6-1.1
          - kubectl=1.29.6-1.1
        state: present
        allow_downgrade: yes
        allow_change_held_packages: yes

    - name: Hold kubelet, kubeadm, and kubectl packages
      command: apt-mark hold kubelet kubeadm kubectl

- name: Configure crictl to use containerd
  hosts: kube
  become: yes  
  tasks:
    - name: Configure crictl runtime endpoint
      command: crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock
      
- name: Initialize Kubernetes Cluster on Master
  hosts: master  
  become: yes
  tasks:
    - name: Check if admin.conf file exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_stat

    - name: Print cluster info check result
      debug:
        msg: "Kubernetes cluster is already initialized."
      when: kubeadm_stat

    - name: Initialize kubeadm if cluster is not initialized
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_host }} --node-name master
      when: not kubeadm_stat

- name: Set up Kubernetes configuration on Master
  hosts: master  
  become: yes
  vars:
    HOME: "/home/ubuntu"
  tasks:
    - name: Create .kube directory
      file:
        path: "{{ HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ HOME }}/.kube/config"
        remote_src: yes  

    - name: Change ownership of kube config
      file:
        path: "{{ HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'


- name: Get the kubeadm join command
  hosts: master
  tasks:
    - name: Saving it into join_command var to use in worker
      command: kubeadm token create --print-join-command
      register: join_command

- name: Apply Flannel Network Configuration on Master
  hosts: master  
  tasks:
    - name: Apply Flannel configuration
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

- name: Install Helm on Master
  hosts: master
  become: yes    
  tasks:
    - name: Install Helm using Snap
      command: snap install helm --classic

- name: Join worker nodes to the cluster
  hosts: worker
  become: yes
  tasks:
    - name: Check if kublet is already configured
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join the worker node to the cluster
      command: "{{ hostvars['master'].join_command.stdout }}"
      when: not kubelet_conf.stat.exists

- name: Install NGINX Ingress Controller on Master
  hosts: master  
  tasks:
    - name: Install ingress-nginx using Helm
      command: helm install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.kind=DaemonSet --set controller.hostNetwork=true